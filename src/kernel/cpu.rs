use crate::kernel::{
    memory::{Error as MemoryError, SystemMemory},
    Pointer,
};
use thiserror::Error;
use yaxpeax_x86::{
    amd64::Opcode,
    long_mode::{Instruction, Operand},
};

#[derive(Error, Debug)]
pub enum Error {
    #[error("Memory Error: {0}")]
    Memory(#[from] MemoryError),
}

pub type Result<T> = std::result::Result<T, Error>;

pub type RegisterFile = [u64; 16];
#[repr(usize)]
pub enum Register {
    Rax = 0,
    Rcx = 1,
    Rdx = 2,
    Rbx = 3,
    Rsp = 4,
    Rbp = 5,
    Rsi = 6,
    Rdi = 7,
    R8 = 8,
    R9 = 9,
    R10 = 10,
    R11 = 11,
    R12 = 12,
    R13 = 13,
    R14 = 14,
    R15 = 15,
    Rip = 16,
}

fn read_operand(memory: &SystemMemory, registers: &RegisterFile, operand: Operand) -> u64 {
    match operand {
        Operand::ImmediateI8(v) => v as u64,
        Operand::ImmediateU8(v) => v as u64,
        Operand::ImmediateI16(v) => v as u64,
        Operand::ImmediateU16(v) => v as u64,
        Operand::ImmediateI32(v) => v as u64,
        Operand::ImmediateU32(v) => v as u64,
        Operand::ImmediateI64(v) => v as u64,
        Operand::ImmediateU64(v) => v as u64,
        Operand::Register(spec) => registers[spec.num() as usize],
        // Operand::RegisterMaskMerge(_, _, _) => todo!(),
        // Operand::RegisterMaskMergeSae(_, _, _, _) => todo!(),
        // Operand::RegisterMaskMergeSaeNoround(_, _, _) => todo!(),
        // Operand::DisplacementU32(_) => todo!(),
        // Operand::DisplacementU64(_) => todo!(),
        // Operand::RegDeref(_) => todo!(),
        // Operand::RegDisp(_, _) => todo!(),
        // Operand::RegScale(_, _) => todo!(),
        // Operand::RegIndexBase(_, _) => todo!(),
        // Operand::RegIndexBaseDisp(_, _, _) => todo!(),
        // Operand::RegScaleDisp(_, _, _) => todo!(),
        // Operand::RegIndexBaseScale(_, _, _) => todo!(),
        // Operand::RegIndexBaseScaleDisp(_, _, _, _) => todo!(),
        // Operand::RegDerefMasked(_, _) => todo!(),
        // Operand::RegDispMasked(_, _, _) => todo!(),
        // Operand::RegScaleMasked(_, _, _) => todo!(),
        // Operand::RegIndexBaseMasked(_, _, _) => todo!(),
        // Operand::RegIndexBaseDispMasked(_, _, _, _) => todo!(),
        // Operand::RegScaleDispMasked(_, _, _, _) => todo!(),
        // Operand::RegIndexBaseScaleMasked(_, _, _, _) => todo!(),
        // Operand::RegIndexBaseScaleDispMasked(_, _, _, _, _) => todo!(),
        Operand::Nothing => panic!("operand out of bounds."),
        _ => unreachable!(),
    }
}

fn write_target(memory: &SystemMemory, registers: &mut RegisterFile, operand: Operand, value: u64) {
    match operand {
        Operand::Register(spec) => registers[spec.num() as usize] = value,
        _ => unimplemented!(),
    }
}

pub fn run_instruction<S, R>(
    memory: &SystemMemory,
    registers: &mut RegisterFile,
    instruction: &Instruction,
    mut syscall_handler: S,
) -> Result<Option<R>>
where
    S: FnMut(&mut RegisterFile) -> R,
{
    println!("{}", instruction);

    match instruction.opcode() {
        Opcode::Invalid => unimplemented!(), // TODO this should fire a signal.
        // Opcode::ADD => todo!(),
        // Opcode::OR => todo!(),
        // Opcode::ADC => todo!(),
        // Opcode::SBB => todo!(),
        Opcode::AND => {
            let a = read_operand(memory, registers, instruction.operand(0));
            let b = read_operand(memory, registers, instruction.operand(1));
            write_target(memory, registers, instruction.operand(0), a & b);
        }
        Opcode::XOR => {
            let a = read_operand(memory, registers, instruction.operand(0));
            let b = read_operand(memory, registers, instruction.operand(1));
            write_target(memory, registers, instruction.operand(0), a ^ b);
        }
        // Opcode::SUB => todo!(),
        // Opcode::CMP => todo!(),
        // Opcode::XADD => todo!(),
        // Opcode::BT => todo!(),
        // Opcode::BTS => todo!(),
        // Opcode::BTC => todo!(),
        // Opcode::BTR => todo!(),
        // Opcode::BSF => todo!(),
        // Opcode::BSR => todo!(),
        // Opcode::TZCNT => todo!(),
        // Opcode::MOVSS => todo!(),
        // Opcode::ADDSS => todo!(),
        // Opcode::SUBSS => todo!(),
        // Opcode::MULSS => todo!(),
        // Opcode::DIVSS => todo!(),
        // Opcode::MINSS => todo!(),
        // Opcode::MAXSS => todo!(),
        // Opcode::SQRTSS => todo!(),
        // Opcode::MOVSD => todo!(),
        // Opcode::SQRTSD => todo!(),
        // Opcode::ADDSD => todo!(),
        // Opcode::SUBSD => todo!(),
        // Opcode::MULSD => todo!(),
        // Opcode::DIVSD => todo!(),
        // Opcode::MINSD => todo!(),
        // Opcode::MAXSD => todo!(),
        // Opcode::MOVSLDUP => todo!(),
        // Opcode::MOVSHDUP => todo!(),
        // Opcode::MOVDDUP => todo!(),
        // Opcode::HADDPS => todo!(),
        // Opcode::HSUBPS => todo!(),
        // Opcode::ADDSUBPD => todo!(),
        // Opcode::ADDSUBPS => todo!(),
        // Opcode::CVTSI2SS => todo!(),
        // Opcode::CVTSI2SD => todo!(),
        // Opcode::CVTTSD2SI => todo!(),
        // Opcode::CVTTPS2DQ => todo!(),
        // Opcode::CVTPD2DQ => todo!(),
        // Opcode::CVTPD2PS => todo!(),
        // Opcode::CVTPS2DQ => todo!(),
        // Opcode::CVTSD2SI => todo!(),
        // Opcode::CVTSD2SS => todo!(),
        // Opcode::CVTTSS2SI => todo!(),
        // Opcode::CVTSS2SI => todo!(),
        // Opcode::CVTSS2SD => todo!(),
        // Opcode::CVTDQ2PD => todo!(),
        // Opcode::LDDQU => todo!(),
        // Opcode::MOVZX => todo!(),
        // Opcode::MOVSX => todo!(),
        // Opcode::MOVSXD => todo!(),
        // Opcode::SAR => todo!(),
        // Opcode::SAL => todo!(),
        // Opcode::SHR => todo!(),
        // Opcode::SHRD => todo!(),
        // Opcode::SHL => todo!(),
        // Opcode::RCR => todo!(),
        // Opcode::RCL => todo!(),
        // Opcode::ROR => todo!(),
        // Opcode::ROL => todo!(),
        // Opcode::INC => todo!(),
        // Opcode::DEC => todo!(),
        // Opcode::HLT => todo!(),
        // Opcode::CALL => todo!(),
        // Opcode::CALLF => todo!(),
        // Opcode::JMP => todo!(),
        // Opcode::JMPF => todo!(),
        Opcode::PUSH => {
            let stack_pointer = registers[Register::Rsp as usize];

            // We need to figure out the width of our instruction.
            let mem_size = instruction
                .mem_size()
                .map(|size| {
                    size.bytes_size()
                        .expect("Could not get instruction operand width.")
                })
                .unwrap_or(8);

            let value = read_operand(memory, registers, instruction.operand(0));

            let mem_size = instruction.operand(0).width().unwrap_or(mem_size);

            let mut block = memory.get_memory_block_mut(&stack_pointer)?;
            let target_bytes =
                block.get_range_mut(stack_pointer..stack_pointer + mem_size as Pointer)?;
            target_bytes.copy_from_slice(&value.to_le_bytes());
        }
        Opcode::POP => {
            let stack_pointer = registers[Register::Rsp as usize];

            let block = memory.get_memory_block(&stack_pointer)?;

            // We need to figure out the width of our instruction.
            let mem_size = instruction
                .mem_size()
                .map(|size| {
                    size.bytes_size()
                        .expect("Could not get instruction operand width.")
                })
                .unwrap_or(8);

            // Reading the value is more convoluted than you may expect.
            let mem_size = instruction.operand(0).width().unwrap_or(mem_size);
            let value_bytes =
                block.get_range(stack_pointer..stack_pointer + mem_size as Pointer)?;
            let mut value = [0u8; 8];
            value.copy_from_slice(value_bytes);
            let value = Pointer::from_le_bytes(value);

            registers[Register::Rsp as usize] = stack_pointer + mem_size as Pointer;
            write_target(memory, registers, instruction.operand(0), value);
        }
        // Opcode::LEA => todo!(),
        Opcode::NOP => {
            // Easy.
        }
        // Opcode::PREFETCHNTA => todo!(),
        // Opcode::PREFETCH0 => todo!(),
        // Opcode::PREFETCH1 => todo!(),
        // Opcode::PREFETCH2 => todo!(),
        // Opcode::XCHG => todo!(),
        // Opcode::POPF => todo!(),
        // Opcode::INT => todo!(),
        // Opcode::INTO => todo!(),
        // Opcode::IRET => todo!(),
        // Opcode::IRETD => todo!(),
        // Opcode::IRETQ => todo!(),
        // Opcode::RETF => todo!(),
        // Opcode::ENTER => todo!(),
        // Opcode::LEAVE => todo!(),
        Opcode::MOV => {
            let to_move = read_operand(memory, registers, instruction.operand(1));
            write_target(memory, registers, instruction.operand(0), to_move);
        }
        // Opcode::RETURN => todo!(),
        // Opcode::PUSHF => todo!(),
        // Opcode::WAIT => todo!(),
        // Opcode::CBW => todo!(),
        // Opcode::CWDE => todo!(),
        // Opcode::CDQE => todo!(),
        // Opcode::CWD => todo!(),
        // Opcode::CDQ => todo!(),
        // Opcode::CQO => todo!(),
        // Opcode::LODS => todo!(),
        // Opcode::STOS => todo!(),
        // Opcode::LAHF => todo!(),
        // Opcode::SAHF => todo!(),
        // Opcode::CMPS => todo!(),
        // Opcode::SCAS => todo!(),
        // Opcode::MOVS => todo!(),
        // Opcode::TEST => todo!(),
        // Opcode::INS => todo!(),
        // Opcode::IN => todo!(),
        // Opcode::OUTS => todo!(),
        // Opcode::OUT => todo!(),
        // Opcode::IMUL => todo!(),
        // Opcode::JO => todo!(),
        // Opcode::JNO => todo!(),
        // Opcode::JB => todo!(),
        // Opcode::JNB => todo!(),
        // Opcode::JZ => todo!(),
        // Opcode::JNZ => todo!(),
        // Opcode::JA => todo!(),
        // Opcode::JNA => todo!(),
        // Opcode::JS => todo!(),
        // Opcode::JNS => todo!(),
        // Opcode::JP => todo!(),
        // Opcode::JNP => todo!(),
        // Opcode::JL => todo!(),
        // Opcode::JGE => todo!(),
        // Opcode::JLE => todo!(),
        // Opcode::JG => todo!(),
        // Opcode::CMOVA => todo!(),
        // Opcode::CMOVB => todo!(),
        // Opcode::CMOVG => todo!(),
        // Opcode::CMOVGE => todo!(),
        // Opcode::CMOVL => todo!(),
        // Opcode::CMOVLE => todo!(),
        // Opcode::CMOVNA => todo!(),
        // Opcode::CMOVNB => todo!(),
        // Opcode::CMOVNO => todo!(),
        // Opcode::CMOVNP => todo!(),
        // Opcode::CMOVNS => todo!(),
        // Opcode::CMOVNZ => todo!(),
        // Opcode::CMOVO => todo!(),
        // Opcode::CMOVP => todo!(),
        // Opcode::CMOVS => todo!(),
        // Opcode::CMOVZ => todo!(),
        // Opcode::DIV => todo!(),
        // Opcode::IDIV => todo!(),
        // Opcode::MUL => todo!(),
        // Opcode::NEG => todo!(),
        // Opcode::NOT => todo!(),
        // Opcode::CMPXCHG => todo!(),
        // Opcode::SETO => todo!(),
        // Opcode::SETNO => todo!(),
        // Opcode::SETB => todo!(),
        // Opcode::SETAE => todo!(),
        // Opcode::SETZ => todo!(),
        // Opcode::SETNZ => todo!(),
        // Opcode::SETBE => todo!(),
        // Opcode::SETA => todo!(),
        // Opcode::SETS => todo!(),
        // Opcode::SETNS => todo!(),
        // Opcode::SETP => todo!(),
        // Opcode::SETNP => todo!(),
        // Opcode::SETL => todo!(),
        // Opcode::SETGE => todo!(),
        // Opcode::SETLE => todo!(),
        // Opcode::SETG => todo!(),
        // Opcode::CPUID => todo!(),
        // Opcode::UD0 => todo!(),
        // Opcode::UD1 => todo!(),
        // Opcode::UD2 => todo!(),
        // Opcode::WBINVD => todo!(),
        // Opcode::INVD => todo!(),
        // Opcode::SYSRET => todo!(),
        // Opcode::CLTS => todo!(),
        Opcode::SYSCALL => {
            return Ok(Some(syscall_handler(registers)));
        }
        // Opcode::LSL => todo!(),
        // Opcode::LAR => todo!(),
        // Opcode::SGDT => todo!(),
        // Opcode::SIDT => todo!(),
        // Opcode::LGDT => todo!(),
        // Opcode::LIDT => todo!(),
        // Opcode::SMSW => todo!(),
        // Opcode::LMSW => todo!(),
        // Opcode::SWAPGS => todo!(),
        // Opcode::RDTSCP => todo!(),
        // Opcode::INVLPG => todo!(),
        // Opcode::FXSAVE => todo!(),
        // Opcode::FXRSTOR => todo!(),
        // Opcode::LDMXCSR => todo!(),
        // Opcode::STMXCSR => todo!(),
        // Opcode::XSAVE => todo!(),
        // Opcode::XRSTOR => todo!(),
        // Opcode::XSAVEOPT => todo!(),
        // Opcode::LFENCE => todo!(),
        // Opcode::MFENCE => todo!(),
        // Opcode::SFENCE => todo!(),
        // Opcode::CLFLUSH => todo!(),
        // Opcode::CLFLUSHOPT => todo!(),
        // Opcode::CLWB => todo!(),
        // Opcode::WRMSR => todo!(),
        // Opcode::RDTSC => todo!(),
        // Opcode::RDMSR => todo!(),
        // Opcode::RDPMC => todo!(),
        // Opcode::SLDT => todo!(),
        // Opcode::STR => todo!(),
        // Opcode::LLDT => todo!(),
        // Opcode::LTR => todo!(),
        // Opcode::VERR => todo!(),
        // Opcode::VERW => todo!(),
        // Opcode::CMC => todo!(),
        // Opcode::CLC => todo!(),
        // Opcode::STC => todo!(),
        // Opcode::CLI => todo!(),
        // Opcode::STI => todo!(),
        // Opcode::CLD => todo!(),
        // Opcode::STD => todo!(),
        // Opcode::JMPE => todo!(),
        // Opcode::POPCNT => todo!(),
        // Opcode::MOVDQU => todo!(),
        // Opcode::MOVDQA => todo!(),
        // Opcode::MOVQ => todo!(),
        // Opcode::CMPSS => todo!(),
        // Opcode::CMPSD => todo!(),
        // Opcode::UNPCKLPS => todo!(),
        // Opcode::UNPCKLPD => todo!(),
        // Opcode::UNPCKHPS => todo!(),
        // Opcode::UNPCKHPD => todo!(),
        // Opcode::PSHUFHW => todo!(),
        // Opcode::PSHUFLW => todo!(),
        // Opcode::MOVUPS => todo!(),
        // Opcode::MOVQ2DQ => todo!(),
        // Opcode::MOVDQ2Q => todo!(),
        // Opcode::RSQRTSS => todo!(),
        // Opcode::RCPSS => todo!(),
        // Opcode::ANDN => todo!(),
        // Opcode::BEXTR => todo!(),
        // Opcode::BLSI => todo!(),
        // Opcode::BLSMSK => todo!(),
        // Opcode::BLSR => todo!(),
        // Opcode::VMCLEAR => todo!(),
        // Opcode::VMXON => todo!(),
        // Opcode::VMCALL => todo!(),
        // Opcode::VMLAUNCH => todo!(),
        // Opcode::VMRESUME => todo!(),
        // Opcode::VMXOFF => todo!(),
        // Opcode::PCONFIG => todo!(),
        // Opcode::MONITOR => todo!(),
        // Opcode::MWAIT => todo!(),
        // Opcode::MONITORX => todo!(),
        // Opcode::MWAITX => todo!(),
        // Opcode::CLAC => todo!(),
        // Opcode::STAC => todo!(),
        // Opcode::ENCLS => todo!(),
        // Opcode::ENCLV => todo!(),
        // Opcode::XGETBV => todo!(),
        // Opcode::XSETBV => todo!(),
        // Opcode::VMFUNC => todo!(),
        // Opcode::XABORT => todo!(),
        // Opcode::XBEGIN => todo!(),
        // Opcode::XEND => todo!(),
        // Opcode::XTEST => todo!(),
        // Opcode::ENCLU => todo!(),
        // Opcode::RDPKRU => todo!(),
        // Opcode::WRPKRU => todo!(),
        // Opcode::RDPRU => todo!(),
        // Opcode::CLZERO => todo!(),
        // Opcode::RDSEED => todo!(),
        // Opcode::RDRAND => todo!(),
        // Opcode::ADDPS => todo!(),
        // Opcode::ADDPD => todo!(),
        // Opcode::ANDNPS => todo!(),
        // Opcode::ANDNPD => todo!(),
        // Opcode::ANDPS => todo!(),
        // Opcode::ANDPD => todo!(),
        // Opcode::BSWAP => todo!(),
        // Opcode::CMPPD => todo!(),
        // Opcode::CMPPS => todo!(),
        // Opcode::COMISD => todo!(),
        // Opcode::COMISS => todo!(),
        // Opcode::CVTDQ2PS => todo!(),
        // Opcode::CVTPI2PS => todo!(),
        // Opcode::CVTPI2PD => todo!(),
        // Opcode::CVTPS2PD => todo!(),
        // Opcode::CVTPS2PI => todo!(),
        // Opcode::CVTPD2PI => todo!(),
        // Opcode::CVTTPS2PI => todo!(),
        // Opcode::CVTTPD2PI => todo!(),
        // Opcode::CVTTPD2DQ => todo!(),
        // Opcode::DIVPS => todo!(),
        // Opcode::DIVPD => todo!(),
        // Opcode::EMMS => todo!(),
        // Opcode::GETSEC => todo!(),
        // Opcode::LFS => todo!(),
        // Opcode::LGS => todo!(),
        // Opcode::LSS => todo!(),
        // Opcode::MASKMOVQ => todo!(),
        // Opcode::MASKMOVDQU => todo!(),
        // Opcode::MAXPS => todo!(),
        // Opcode::MAXPD => todo!(),
        // Opcode::MINPS => todo!(),
        // Opcode::MINPD => todo!(),
        // Opcode::MOVAPS => todo!(),
        // Opcode::MOVAPD => todo!(),
        // Opcode::MOVD => todo!(),
        // Opcode::MOVLPS => todo!(),
        // Opcode::MOVLPD => todo!(),
        // Opcode::MOVHPS => todo!(),
        // Opcode::MOVHPD => todo!(),
        // Opcode::MOVLHPS => todo!(),
        // Opcode::MOVHLPS => todo!(),
        // Opcode::MOVUPD => todo!(),
        // Opcode::MOVMSKPS => todo!(),
        // Opcode::MOVMSKPD => todo!(),
        // Opcode::MOVNTI => todo!(),
        // Opcode::MOVNTPS => todo!(),
        // Opcode::MOVNTPD => todo!(),
        // Opcode::EXTRQ => todo!(),
        // Opcode::INSERTQ => todo!(),
        // Opcode::MOVNTSS => todo!(),
        // Opcode::MOVNTSD => todo!(),
        // Opcode::MOVNTQ => todo!(),
        // Opcode::MOVNTDQ => todo!(),
        // Opcode::MULPS => todo!(),
        // Opcode::MULPD => todo!(),
        // Opcode::ORPS => todo!(),
        // Opcode::ORPD => todo!(),
        // Opcode::PACKSSDW => todo!(),
        // Opcode::PACKSSWB => todo!(),
        // Opcode::PACKUSWB => todo!(),
        // Opcode::PADDB => todo!(),
        // Opcode::PADDD => todo!(),
        // Opcode::PADDQ => todo!(),
        // Opcode::PADDSB => todo!(),
        // Opcode::PADDSW => todo!(),
        // Opcode::PADDUSB => todo!(),
        // Opcode::PADDUSW => todo!(),
        // Opcode::PADDW => todo!(),
        // Opcode::PAND => todo!(),
        // Opcode::PANDN => todo!(),
        // Opcode::PAVGB => todo!(),
        // Opcode::PAVGW => todo!(),
        // Opcode::PCMPEQB => todo!(),
        // Opcode::PCMPEQD => todo!(),
        // Opcode::PCMPEQW => todo!(),
        // Opcode::PCMPGTB => todo!(),
        // Opcode::PCMPGTD => todo!(),
        // Opcode::PCMPGTW => todo!(),
        // Opcode::PINSRW => todo!(),
        // Opcode::PMADDWD => todo!(),
        // Opcode::PMAXSW => todo!(),
        // Opcode::PMAXUB => todo!(),
        // Opcode::PMINSW => todo!(),
        // Opcode::PMINUB => todo!(),
        // Opcode::PMOVMSKB => todo!(),
        // Opcode::PMULHUW => todo!(),
        // Opcode::PMULHW => todo!(),
        // Opcode::PMULLW => todo!(),
        // Opcode::PMULUDQ => todo!(),
        // Opcode::POR => todo!(),
        // Opcode::PSADBW => todo!(),
        // Opcode::PSHUFW => todo!(),
        // Opcode::PSHUFD => todo!(),
        // Opcode::PSLLD => todo!(),
        // Opcode::PSLLDQ => todo!(),
        // Opcode::PSLLQ => todo!(),
        // Opcode::PSLLW => todo!(),
        // Opcode::PSRAD => todo!(),
        // Opcode::PSRAW => todo!(),
        // Opcode::PSRLD => todo!(),
        // Opcode::PSRLDQ => todo!(),
        // Opcode::PSRLQ => todo!(),
        // Opcode::PSRLW => todo!(),
        // Opcode::PSUBB => todo!(),
        // Opcode::PSUBD => todo!(),
        // Opcode::PSUBQ => todo!(),
        // Opcode::PSUBSB => todo!(),
        // Opcode::PSUBSW => todo!(),
        // Opcode::PSUBUSB => todo!(),
        // Opcode::PSUBUSW => todo!(),
        // Opcode::PSUBW => todo!(),
        // Opcode::PUNPCKHBW => todo!(),
        // Opcode::PUNPCKHDQ => todo!(),
        // Opcode::PUNPCKHWD => todo!(),
        // Opcode::PUNPCKLBW => todo!(),
        // Opcode::PUNPCKLDQ => todo!(),
        // Opcode::PUNPCKLWD => todo!(),
        // Opcode::PUNPCKLQDQ => todo!(),
        // Opcode::PUNPCKHQDQ => todo!(),
        // Opcode::PXOR => todo!(),
        // Opcode::RCPPS => todo!(),
        // Opcode::RSM => todo!(),
        // Opcode::RSQRTPS => todo!(),
        // Opcode::SHLD => todo!(),
        // Opcode::SHUFPD => todo!(),
        // Opcode::SHUFPS => todo!(),
        // Opcode::SLHD => todo!(),
        // Opcode::SQRTPS => todo!(),
        // Opcode::SQRTPD => todo!(),
        // Opcode::SUBPS => todo!(),
        // Opcode::SUBPD => todo!(),
        // Opcode::SYSENTER => todo!(),
        // Opcode::SYSEXIT => todo!(),
        // Opcode::UCOMISD => todo!(),
        // Opcode::UCOMISS => todo!(),
        // Opcode::VMREAD => todo!(),
        // Opcode::VMWRITE => todo!(),
        // Opcode::XORPS => todo!(),
        // Opcode::XORPD => todo!(),
        // Opcode::VMOVDDUP => todo!(),
        // Opcode::VPSHUFLW => todo!(),
        // Opcode::VPSHUFHW => todo!(),
        // Opcode::VHADDPS => todo!(),
        // Opcode::VHSUBPS => todo!(),
        // Opcode::VADDSUBPS => todo!(),
        // Opcode::VCVTPD2DQ => todo!(),
        // Opcode::VLDDQU => todo!(),
        // Opcode::VCOMISD => todo!(),
        // Opcode::VCOMISS => todo!(),
        // Opcode::VUCOMISD => todo!(),
        // Opcode::VUCOMISS => todo!(),
        // Opcode::VADDPD => todo!(),
        // Opcode::VADDPS => todo!(),
        // Opcode::VADDSD => todo!(),
        // Opcode::VADDSS => todo!(),
        // Opcode::VADDSUBPD => todo!(),
        // Opcode::VAESDEC => todo!(),
        // Opcode::VAESDECLAST => todo!(),
        // Opcode::VAESENC => todo!(),
        // Opcode::VAESENCLAST => todo!(),
        // Opcode::VAESIMC => todo!(),
        // Opcode::VAESKEYGENASSIST => todo!(),
        // Opcode::VBLENDPD => todo!(),
        // Opcode::VBLENDPS => todo!(),
        // Opcode::VBLENDVPD => todo!(),
        // Opcode::VBLENDVPS => todo!(),
        // Opcode::VBROADCASTF128 => todo!(),
        // Opcode::VBROADCASTI128 => todo!(),
        // Opcode::VBROADCASTSD => todo!(),
        // Opcode::VBROADCASTSS => todo!(),
        // Opcode::VCMPSD => todo!(),
        // Opcode::VCMPSS => todo!(),
        // Opcode::VCMPPD => todo!(),
        // Opcode::VCMPPS => todo!(),
        // Opcode::VCVTDQ2PD => todo!(),
        // Opcode::VCVTDQ2PS => todo!(),
        // Opcode::VCVTPD2PS => todo!(),
        // Opcode::VCVTPH2PS => todo!(),
        // Opcode::VCVTPS2DQ => todo!(),
        // Opcode::VCVTPS2PD => todo!(),
        // Opcode::VCVTSS2SD => todo!(),
        // Opcode::VCVTSI2SS => todo!(),
        // Opcode::VCVTSI2SD => todo!(),
        // Opcode::VCVTSD2SI => todo!(),
        // Opcode::VCVTSD2SS => todo!(),
        // Opcode::VCVTPS2PH => todo!(),
        // Opcode::VCVTSS2SI => todo!(),
        // Opcode::VCVTTPD2DQ => todo!(),
        // Opcode::VCVTTPS2DQ => todo!(),
        // Opcode::VCVTTSS2SI => todo!(),
        // Opcode::VCVTTSD2SI => todo!(),
        // Opcode::VDIVPD => todo!(),
        // Opcode::VDIVPS => todo!(),
        // Opcode::VDIVSD => todo!(),
        // Opcode::VDIVSS => todo!(),
        // Opcode::VDPPD => todo!(),
        // Opcode::VDPPS => todo!(),
        // Opcode::VEXTRACTF128 => todo!(),
        // Opcode::VEXTRACTI128 => todo!(),
        // Opcode::VEXTRACTPS => todo!(),
        // Opcode::VFMADD132PD => todo!(),
        // Opcode::VFMADD132PS => todo!(),
        // Opcode::VFMADD132SD => todo!(),
        // Opcode::VFMADD132SS => todo!(),
        // Opcode::VFMADD213PD => todo!(),
        // Opcode::VFMADD213PS => todo!(),
        // Opcode::VFMADD213SD => todo!(),
        // Opcode::VFMADD213SS => todo!(),
        // Opcode::VFMADD231PD => todo!(),
        // Opcode::VFMADD231PS => todo!(),
        // Opcode::VFMADD231SD => todo!(),
        // Opcode::VFMADD231SS => todo!(),
        // Opcode::VFMADDSUB132PD => todo!(),
        // Opcode::VFMADDSUB132PS => todo!(),
        // Opcode::VFMADDSUB213PD => todo!(),
        // Opcode::VFMADDSUB213PS => todo!(),
        // Opcode::VFMADDSUB231PD => todo!(),
        // Opcode::VFMADDSUB231PS => todo!(),
        // Opcode::VFMSUB132PD => todo!(),
        // Opcode::VFMSUB132PS => todo!(),
        // Opcode::VFMSUB132SD => todo!(),
        // Opcode::VFMSUB132SS => todo!(),
        // Opcode::VFMSUB213PD => todo!(),
        // Opcode::VFMSUB213PS => todo!(),
        // Opcode::VFMSUB213SD => todo!(),
        // Opcode::VFMSUB213SS => todo!(),
        // Opcode::VFMSUB231PD => todo!(),
        // Opcode::VFMSUB231PS => todo!(),
        // Opcode::VFMSUB231SD => todo!(),
        // Opcode::VFMSUB231SS => todo!(),
        // Opcode::VFMSUBADD132PD => todo!(),
        // Opcode::VFMSUBADD132PS => todo!(),
        // Opcode::VFMSUBADD213PD => todo!(),
        // Opcode::VFMSUBADD213PS => todo!(),
        // Opcode::VFMSUBADD231PD => todo!(),
        // Opcode::VFMSUBADD231PS => todo!(),
        // Opcode::VFNMADD132PD => todo!(),
        // Opcode::VFNMADD132PS => todo!(),
        // Opcode::VFNMADD132SD => todo!(),
        // Opcode::VFNMADD132SS => todo!(),
        // Opcode::VFNMADD213PD => todo!(),
        // Opcode::VFNMADD213PS => todo!(),
        // Opcode::VFNMADD213SD => todo!(),
        // Opcode::VFNMADD213SS => todo!(),
        // Opcode::VFNMADD231PD => todo!(),
        // Opcode::VFNMADD231PS => todo!(),
        // Opcode::VFNMADD231SD => todo!(),
        // Opcode::VFNMADD231SS => todo!(),
        // Opcode::VFNMSUB132PD => todo!(),
        // Opcode::VFNMSUB132PS => todo!(),
        // Opcode::VFNMSUB132SD => todo!(),
        // Opcode::VFNMSUB132SS => todo!(),
        // Opcode::VFNMSUB213PD => todo!(),
        // Opcode::VFNMSUB213PS => todo!(),
        // Opcode::VFNMSUB213SD => todo!(),
        // Opcode::VFNMSUB213SS => todo!(),
        // Opcode::VFNMSUB231PD => todo!(),
        // Opcode::VFNMSUB231PS => todo!(),
        // Opcode::VFNMSUB231SD => todo!(),
        // Opcode::VFNMSUB231SS => todo!(),
        // Opcode::VGATHERDPD => todo!(),
        // Opcode::VGATHERDPS => todo!(),
        // Opcode::VGATHERQPD => todo!(),
        // Opcode::VGATHERQPS => todo!(),
        // Opcode::VHADDPD => todo!(),
        // Opcode::VHSUBPD => todo!(),
        // Opcode::VINSERTF128 => todo!(),
        // Opcode::VINSERTI128 => todo!(),
        // Opcode::VINSERTPS => todo!(),
        // Opcode::VMASKMOVDQU => todo!(),
        // Opcode::VMASKMOVPD => todo!(),
        // Opcode::VMASKMOVPS => todo!(),
        // Opcode::VMAXPD => todo!(),
        // Opcode::VMAXPS => todo!(),
        // Opcode::VMAXSD => todo!(),
        // Opcode::VMAXSS => todo!(),
        // Opcode::VMINPD => todo!(),
        // Opcode::VMINPS => todo!(),
        // Opcode::VMINSD => todo!(),
        // Opcode::VMINSS => todo!(),
        // Opcode::VMOVAPD => todo!(),
        // Opcode::VMOVAPS => todo!(),
        // Opcode::VMOVD => todo!(),
        // Opcode::VMOVDQA => todo!(),
        // Opcode::VMOVDQU => todo!(),
        // Opcode::VMOVHLPS => todo!(),
        // Opcode::VMOVHPD => todo!(),
        // Opcode::VMOVHPS => todo!(),
        // Opcode::VMOVLHPS => todo!(),
        // Opcode::VMOVLPD => todo!(),
        // Opcode::VMOVLPS => todo!(),
        // Opcode::VMOVMSKPD => todo!(),
        // Opcode::VMOVMSKPS => todo!(),
        // Opcode::VMOVNTDQ => todo!(),
        // Opcode::VMOVNTDQA => todo!(),
        // Opcode::VMOVNTPD => todo!(),
        // Opcode::VMOVNTPS => todo!(),
        // Opcode::VMOVQ => todo!(),
        // Opcode::VMOVSS => todo!(),
        // Opcode::VMOVSD => todo!(),
        // Opcode::VMOVSHDUP => todo!(),
        // Opcode::VMOVSLDUP => todo!(),
        // Opcode::VMOVUPD => todo!(),
        // Opcode::VMOVUPS => todo!(),
        // Opcode::VMPSADBW => todo!(),
        // Opcode::VMULPD => todo!(),
        // Opcode::VMULPS => todo!(),
        // Opcode::VMULSD => todo!(),
        // Opcode::VMULSS => todo!(),
        // Opcode::VPABSB => todo!(),
        // Opcode::VPABSD => todo!(),
        // Opcode::VPABSW => todo!(),
        // Opcode::VPACKSSDW => todo!(),
        // Opcode::VPACKUSDW => todo!(),
        // Opcode::VPACKSSWB => todo!(),
        // Opcode::VPACKUSWB => todo!(),
        // Opcode::VPADDB => todo!(),
        // Opcode::VPADDD => todo!(),
        // Opcode::VPADDQ => todo!(),
        // Opcode::VPADDSB => todo!(),
        // Opcode::VPADDSW => todo!(),
        // Opcode::VPADDUSB => todo!(),
        // Opcode::VPADDUSW => todo!(),
        // Opcode::VPADDW => todo!(),
        // Opcode::VPALIGNR => todo!(),
        // Opcode::VANDPD => todo!(),
        // Opcode::VANDPS => todo!(),
        // Opcode::VORPD => todo!(),
        // Opcode::VORPS => todo!(),
        // Opcode::VANDNPD => todo!(),
        // Opcode::VANDNPS => todo!(),
        // Opcode::VPAND => todo!(),
        // Opcode::VPANDN => todo!(),
        // Opcode::VPAVGB => todo!(),
        // Opcode::VPAVGW => todo!(),
        // Opcode::VPBLENDD => todo!(),
        // Opcode::VPBLENDVB => todo!(),
        // Opcode::VPBLENDW => todo!(),
        // Opcode::VPBROADCASTB => todo!(),
        // Opcode::VPBROADCASTD => todo!(),
        // Opcode::VPBROADCASTQ => todo!(),
        // Opcode::VPBROADCASTW => todo!(),
        // Opcode::VPCLMULQDQ => todo!(),
        // Opcode::VPCMPEQB => todo!(),
        // Opcode::VPCMPEQD => todo!(),
        // Opcode::VPCMPEQQ => todo!(),
        // Opcode::VPCMPEQW => todo!(),
        // Opcode::VPCMPGTB => todo!(),
        // Opcode::VPCMPGTD => todo!(),
        // Opcode::VPCMPGTQ => todo!(),
        // Opcode::VPCMPGTW => todo!(),
        // Opcode::VPCMPESTRI => todo!(),
        // Opcode::VPCMPESTRM => todo!(),
        // Opcode::VPCMPISTRI => todo!(),
        // Opcode::VPCMPISTRM => todo!(),
        // Opcode::VPERM2F128 => todo!(),
        // Opcode::VPERM2I128 => todo!(),
        // Opcode::VPERMD => todo!(),
        // Opcode::VPERMILPD => todo!(),
        // Opcode::VPERMILPS => todo!(),
        // Opcode::VPERMPD => todo!(),
        // Opcode::VPERMPS => todo!(),
        // Opcode::VPERMQ => todo!(),
        // Opcode::VPEXTRB => todo!(),
        // Opcode::VPEXTRD => todo!(),
        // Opcode::VPEXTRQ => todo!(),
        // Opcode::VPEXTRW => todo!(),
        // Opcode::VPGATHERDD => todo!(),
        // Opcode::VPGATHERDQ => todo!(),
        // Opcode::VPGATHERQD => todo!(),
        // Opcode::VPGATHERQQ => todo!(),
        // Opcode::VPHADDD => todo!(),
        // Opcode::VPHADDSW => todo!(),
        // Opcode::VPHADDW => todo!(),
        // Opcode::VPMADDUBSW => todo!(),
        // Opcode::VPHMINPOSUW => todo!(),
        // Opcode::VPHSUBD => todo!(),
        // Opcode::VPHSUBSW => todo!(),
        // Opcode::VPHSUBW => todo!(),
        // Opcode::VPINSRB => todo!(),
        // Opcode::VPINSRD => todo!(),
        // Opcode::VPINSRQ => todo!(),
        // Opcode::VPINSRW => todo!(),
        // Opcode::VPMADDWD => todo!(),
        // Opcode::VPMASKMOVD => todo!(),
        // Opcode::VPMASKMOVQ => todo!(),
        // Opcode::VPMAXSB => todo!(),
        // Opcode::VPMAXSD => todo!(),
        // Opcode::VPMAXSW => todo!(),
        // Opcode::VPMAXUB => todo!(),
        // Opcode::VPMAXUW => todo!(),
        // Opcode::VPMAXUD => todo!(),
        // Opcode::VPMINSB => todo!(),
        // Opcode::VPMINSW => todo!(),
        // Opcode::VPMINSD => todo!(),
        // Opcode::VPMINUB => todo!(),
        // Opcode::VPMINUW => todo!(),
        // Opcode::VPMINUD => todo!(),
        // Opcode::VPMOVMSKB => todo!(),
        // Opcode::VPMOVSXBD => todo!(),
        // Opcode::VPMOVSXBQ => todo!(),
        // Opcode::VPMOVSXBW => todo!(),
        // Opcode::VPMOVSXDQ => todo!(),
        // Opcode::VPMOVSXWD => todo!(),
        // Opcode::VPMOVSXWQ => todo!(),
        // Opcode::VPMOVZXBD => todo!(),
        // Opcode::VPMOVZXBQ => todo!(),
        // Opcode::VPMOVZXBW => todo!(),
        // Opcode::VPMOVZXDQ => todo!(),
        // Opcode::VPMOVZXWD => todo!(),
        // Opcode::VPMOVZXWQ => todo!(),
        // Opcode::VPMULDQ => todo!(),
        // Opcode::VPMULHRSW => todo!(),
        // Opcode::VPMULHUW => todo!(),
        // Opcode::VPMULHW => todo!(),
        // Opcode::VPMULLQ => todo!(),
        // Opcode::VPMULLD => todo!(),
        // Opcode::VPMULLW => todo!(),
        // Opcode::VPMULUDQ => todo!(),
        // Opcode::VPOR => todo!(),
        // Opcode::VPSADBW => todo!(),
        // Opcode::VPSHUFB => todo!(),
        // Opcode::VPSHUFD => todo!(),
        // Opcode::VPSIGNB => todo!(),
        // Opcode::VPSIGND => todo!(),
        // Opcode::VPSIGNW => todo!(),
        // Opcode::VPSLLD => todo!(),
        // Opcode::VPSLLDQ => todo!(),
        // Opcode::VPSLLQ => todo!(),
        // Opcode::VPSLLVD => todo!(),
        // Opcode::VPSLLVQ => todo!(),
        // Opcode::VPSLLW => todo!(),
        // Opcode::VPSRAD => todo!(),
        // Opcode::VPSRAVD => todo!(),
        // Opcode::VPSRAW => todo!(),
        // Opcode::VPSRLD => todo!(),
        // Opcode::VPSRLDQ => todo!(),
        // Opcode::VPSRLQ => todo!(),
        // Opcode::VPSRLVD => todo!(),
        // Opcode::VPSRLVQ => todo!(),
        // Opcode::VPSRLW => todo!(),
        // Opcode::VPSUBB => todo!(),
        // Opcode::VPSUBD => todo!(),
        // Opcode::VPSUBQ => todo!(),
        // Opcode::VPSUBSB => todo!(),
        // Opcode::VPSUBSW => todo!(),
        // Opcode::VPSUBUSB => todo!(),
        // Opcode::VPSUBUSW => todo!(),
        // Opcode::VPSUBW => todo!(),
        // Opcode::VPTEST => todo!(),
        // Opcode::VPUNPCKHBW => todo!(),
        // Opcode::VPUNPCKHDQ => todo!(),
        // Opcode::VPUNPCKHQDQ => todo!(),
        // Opcode::VPUNPCKHWD => todo!(),
        // Opcode::VPUNPCKLBW => todo!(),
        // Opcode::VPUNPCKLDQ => todo!(),
        // Opcode::VPUNPCKLQDQ => todo!(),
        // Opcode::VPUNPCKLWD => todo!(),
        // Opcode::VPXOR => todo!(),
        // Opcode::VRCPPS => todo!(),
        // Opcode::VROUNDPD => todo!(),
        // Opcode::VROUNDPS => todo!(),
        // Opcode::VROUNDSD => todo!(),
        // Opcode::VROUNDSS => todo!(),
        // Opcode::VRSQRTPS => todo!(),
        // Opcode::VRSQRTSS => todo!(),
        // Opcode::VRCPSS => todo!(),
        // Opcode::VSHUFPD => todo!(),
        // Opcode::VSHUFPS => todo!(),
        // Opcode::VSQRTPD => todo!(),
        // Opcode::VSQRTPS => todo!(),
        // Opcode::VSQRTSS => todo!(),
        // Opcode::VSQRTSD => todo!(),
        // Opcode::VSUBPD => todo!(),
        // Opcode::VSUBPS => todo!(),
        // Opcode::VSUBSD => todo!(),
        // Opcode::VSUBSS => todo!(),
        // Opcode::VTESTPD => todo!(),
        // Opcode::VTESTPS => todo!(),
        // Opcode::VUNPCKHPD => todo!(),
        // Opcode::VUNPCKHPS => todo!(),
        // Opcode::VUNPCKLPD => todo!(),
        // Opcode::VUNPCKLPS => todo!(),
        // Opcode::VXORPD => todo!(),
        // Opcode::VXORPS => todo!(),
        // Opcode::VZEROUPPER => todo!(),
        // Opcode::VZEROALL => todo!(),
        // Opcode::VLDMXCSR => todo!(),
        // Opcode::VSTMXCSR => todo!(),
        // Opcode::PCLMULQDQ => todo!(),
        // Opcode::AESKEYGENASSIST => todo!(),
        // Opcode::AESIMC => todo!(),
        // Opcode::AESENC => todo!(),
        // Opcode::AESENCLAST => todo!(),
        // Opcode::AESDEC => todo!(),
        // Opcode::AESDECLAST => todo!(),
        // Opcode::PCMPGTQ => todo!(),
        // Opcode::PCMPISTRM => todo!(),
        // Opcode::PCMPISTRI => todo!(),
        // Opcode::PCMPESTRI => todo!(),
        // Opcode::PACKUSDW => todo!(),
        // Opcode::PCMPESTRM => todo!(),
        // Opcode::PCMPEQQ => todo!(),
        // Opcode::PTEST => todo!(),
        // Opcode::PHMINPOSUW => todo!(),
        // Opcode::DPPS => todo!(),
        // Opcode::DPPD => todo!(),
        // Opcode::MPSADBW => todo!(),
        // Opcode::PMOVZXDQ => todo!(),
        // Opcode::PMOVSXDQ => todo!(),
        // Opcode::PMOVZXBD => todo!(),
        // Opcode::PMOVSXBD => todo!(),
        // Opcode::PMOVZXWQ => todo!(),
        // Opcode::PMOVSXWQ => todo!(),
        // Opcode::PMOVZXBQ => todo!(),
        // Opcode::PMOVSXBQ => todo!(),
        // Opcode::PMOVSXWD => todo!(),
        // Opcode::PMOVZXWD => todo!(),
        // Opcode::PEXTRQ => todo!(),
        // Opcode::PEXTRD => todo!(),
        // Opcode::PEXTRW => todo!(),
        // Opcode::PEXTRB => todo!(),
        // Opcode::PMOVSXBW => todo!(),
        // Opcode::PMOVZXBW => todo!(),
        // Opcode::PINSRQ => todo!(),
        // Opcode::PINSRD => todo!(),
        // Opcode::PINSRB => todo!(),
        // Opcode::EXTRACTPS => todo!(),
        // Opcode::INSERTPS => todo!(),
        // Opcode::ROUNDSS => todo!(),
        // Opcode::ROUNDSD => todo!(),
        // Opcode::ROUNDPS => todo!(),
        // Opcode::ROUNDPD => todo!(),
        // Opcode::PMAXSB => todo!(),
        // Opcode::PMAXSD => todo!(),
        // Opcode::PMAXUW => todo!(),
        // Opcode::PMAXUD => todo!(),
        // Opcode::PMINSD => todo!(),
        // Opcode::PMINSB => todo!(),
        // Opcode::PMINUD => todo!(),
        // Opcode::PMINUW => todo!(),
        // Opcode::BLENDW => todo!(),
        // Opcode::PBLENDVB => todo!(),
        // Opcode::PBLENDW => todo!(),
        // Opcode::BLENDVPS => todo!(),
        // Opcode::BLENDVPD => todo!(),
        // Opcode::BLENDPS => todo!(),
        // Opcode::BLENDPD => todo!(),
        // Opcode::PMULDQ => todo!(),
        // Opcode::MOVNTDQA => todo!(),
        // Opcode::PMULLD => todo!(),
        // Opcode::PALIGNR => todo!(),
        // Opcode::PSIGNW => todo!(),
        // Opcode::PSIGND => todo!(),
        // Opcode::PSIGNB => todo!(),
        // Opcode::PSHUFB => todo!(),
        // Opcode::PMULHRSW => todo!(),
        // Opcode::PMADDUBSW => todo!(),
        // Opcode::PABSD => todo!(),
        // Opcode::PABSW => todo!(),
        // Opcode::PABSB => todo!(),
        // Opcode::PHSUBSW => todo!(),
        // Opcode::PHSUBW => todo!(),
        // Opcode::PHSUBD => todo!(),
        // Opcode::PHADDD => todo!(),
        // Opcode::PHADDSW => todo!(),
        // Opcode::PHADDW => todo!(),
        // Opcode::HSUBPD => todo!(),
        // Opcode::HADDPD => todo!(),
        // Opcode::SHA1RNDS4 => todo!(),
        // Opcode::SHA1NEXTE => todo!(),
        // Opcode::SHA1MSG1 => todo!(),
        // Opcode::SHA1MSG2 => todo!(),
        // Opcode::SHA256RNDS2 => todo!(),
        // Opcode::SHA256MSG1 => todo!(),
        // Opcode::SHA256MSG2 => todo!(),
        // Opcode::LZCNT => todo!(),
        // Opcode::CLGI => todo!(),
        // Opcode::STGI => todo!(),
        // Opcode::SKINIT => todo!(),
        // Opcode::VMLOAD => todo!(),
        // Opcode::VMMCALL => todo!(),
        // Opcode::VMSAVE => todo!(),
        // Opcode::VMRUN => todo!(),
        // Opcode::INVLPGA => todo!(),
        // Opcode::INVLPGB => todo!(),
        // Opcode::TLBSYNC => todo!(),
        // Opcode::MOVBE => todo!(),
        // Opcode::ADCX => todo!(),
        // Opcode::ADOX => todo!(),
        // Opcode::PREFETCHW => todo!(),
        // Opcode::RDPID => todo!(),
        // Opcode::CMPXCHG8B => todo!(),
        // Opcode::CMPXCHG16B => todo!(),
        // Opcode::VMPTRLD => todo!(),
        // Opcode::VMPTRST => todo!(),
        // Opcode::BZHI => todo!(),
        // Opcode::MULX => todo!(),
        // Opcode::SHLX => todo!(),
        // Opcode::SHRX => todo!(),
        // Opcode::SARX => todo!(),
        // Opcode::PDEP => todo!(),
        // Opcode::PEXT => todo!(),
        // Opcode::RORX => todo!(),
        // Opcode::XRSTORS => todo!(),
        // Opcode::XRSTORS64 => todo!(),
        // Opcode::XSAVEC => todo!(),
        // Opcode::XSAVEC64 => todo!(),
        // Opcode::XSAVES => todo!(),
        // Opcode::XSAVES64 => todo!(),
        // Opcode::RDFSBASE => todo!(),
        // Opcode::RDGSBASE => todo!(),
        // Opcode::WRFSBASE => todo!(),
        // Opcode::WRGSBASE => todo!(),
        // Opcode::CRC32 => todo!(),
        // Opcode::SALC => todo!(),
        // Opcode::XLAT => todo!(),
        // Opcode::F2XM1 => todo!(),
        // Opcode::FABS => todo!(),
        // Opcode::FADD => todo!(),
        // Opcode::FADDP => todo!(),
        // Opcode::FBLD => todo!(),
        // Opcode::FBSTP => todo!(),
        // Opcode::FCHS => todo!(),
        // Opcode::FCMOVB => todo!(),
        // Opcode::FCMOVBE => todo!(),
        // Opcode::FCMOVE => todo!(),
        // Opcode::FCMOVNB => todo!(),
        // Opcode::FCMOVNBE => todo!(),
        // Opcode::FCMOVNE => todo!(),
        // Opcode::FCMOVNU => todo!(),
        // Opcode::FCMOVU => todo!(),
        // Opcode::FCOM => todo!(),
        // Opcode::FCOMI => todo!(),
        // Opcode::FCOMIP => todo!(),
        // Opcode::FCOMP => todo!(),
        // Opcode::FCOMPP => todo!(),
        // Opcode::FCOS => todo!(),
        // Opcode::FDECSTP => todo!(),
        // Opcode::FDISI8087_NOP => todo!(),
        // Opcode::FDIV => todo!(),
        // Opcode::FDIVP => todo!(),
        // Opcode::FDIVR => todo!(),
        // Opcode::FDIVRP => todo!(),
        // Opcode::FENI8087_NOP => todo!(),
        // Opcode::FFREE => todo!(),
        // Opcode::FFREEP => todo!(),
        // Opcode::FIADD => todo!(),
        // Opcode::FICOM => todo!(),
        // Opcode::FICOMP => todo!(),
        // Opcode::FIDIV => todo!(),
        // Opcode::FIDIVR => todo!(),
        // Opcode::FILD => todo!(),
        // Opcode::FIMUL => todo!(),
        // Opcode::FINCSTP => todo!(),
        // Opcode::FIST => todo!(),
        // Opcode::FISTP => todo!(),
        // Opcode::FISTTP => todo!(),
        // Opcode::FISUB => todo!(),
        // Opcode::FISUBR => todo!(),
        // Opcode::FLD => todo!(),
        // Opcode::FLD1 => todo!(),
        // Opcode::FLDCW => todo!(),
        // Opcode::FLDENV => todo!(),
        // Opcode::FLDL2E => todo!(),
        // Opcode::FLDL2T => todo!(),
        // Opcode::FLDLG2 => todo!(),
        // Opcode::FLDLN2 => todo!(),
        // Opcode::FLDPI => todo!(),
        // Opcode::FLDZ => todo!(),
        // Opcode::FMUL => todo!(),
        // Opcode::FMULP => todo!(),
        // Opcode::FNCLEX => todo!(),
        // Opcode::FNINIT => todo!(),
        // Opcode::FNOP => todo!(),
        // Opcode::FNSAVE => todo!(),
        // Opcode::FNSTCW => todo!(),
        // Opcode::FNSTENV => todo!(),
        // Opcode::FNSTOR => todo!(),
        // Opcode::FNSTSW => todo!(),
        // Opcode::FPATAN => todo!(),
        // Opcode::FPREM => todo!(),
        // Opcode::FPREM1 => todo!(),
        // Opcode::FPTAN => todo!(),
        // Opcode::FRNDINT => todo!(),
        // Opcode::FRSTOR => todo!(),
        // Opcode::FSCALE => todo!(),
        // Opcode::FSETPM287_NOP => todo!(),
        // Opcode::FSIN => todo!(),
        // Opcode::FSINCOS => todo!(),
        // Opcode::FSQRT => todo!(),
        // Opcode::FST => todo!(),
        // Opcode::FSTP => todo!(),
        // Opcode::FSTPNCE => todo!(),
        // Opcode::FSUB => todo!(),
        // Opcode::FSUBP => todo!(),
        // Opcode::FSUBR => todo!(),
        // Opcode::FSUBRP => todo!(),
        // Opcode::FTST => todo!(),
        // Opcode::FUCOM => todo!(),
        // Opcode::FUCOMI => todo!(),
        // Opcode::FUCOMIP => todo!(),
        // Opcode::FUCOMP => todo!(),
        // Opcode::FUCOMPP => todo!(),
        // Opcode::FXAM => todo!(),
        // Opcode::FXCH => todo!(),
        // Opcode::FXTRACT => todo!(),
        // Opcode::FYL2X => todo!(),
        // Opcode::FYL2XP1 => todo!(),
        // Opcode::LOOPNZ => todo!(),
        // Opcode::LOOPZ => todo!(),
        // Opcode::LOOP => todo!(),
        // Opcode::JRCXZ => todo!(),
        // Opcode::MOVDIR64B => todo!(),
        // Opcode::MOVDIRI => todo!(),
        // Opcode::AESDEC128KL => todo!(),
        // Opcode::AESDEC256KL => todo!(),
        // Opcode::AESDECWIDE128KL => todo!(),
        // Opcode::AESDECWIDE256KL => todo!(),
        // Opcode::AESENC128KL => todo!(),
        // Opcode::AESENC256KL => todo!(),
        // Opcode::AESENCWIDE128KL => todo!(),
        // Opcode::AESENCWIDE256KL => todo!(),
        // Opcode::ENCODEKEY128 => todo!(),
        // Opcode::ENCODEKEY256 => todo!(),
        // Opcode::LOADIWKEY => todo!(),
        // Opcode::HRESET => todo!(),
        // Opcode::FEMMS => todo!(),
        // Opcode::PI2FW => todo!(),
        // Opcode::PI2FD => todo!(),
        // Opcode::PF2IW => todo!(),
        // Opcode::PF2ID => todo!(),
        // Opcode::PMULHRW => todo!(),
        // Opcode::PFCMPGE => todo!(),
        // Opcode::PFMIN => todo!(),
        // Opcode::PFRCP => todo!(),
        // Opcode::PFRSQRT => todo!(),
        // Opcode::PFSUB => todo!(),
        // Opcode::PFADD => todo!(),
        // Opcode::PFCMPGT => todo!(),
        // Opcode::PFMAX => todo!(),
        // Opcode::PFRCPIT1 => todo!(),
        // Opcode::PFRSQIT1 => todo!(),
        // Opcode::PFSUBR => todo!(),
        // Opcode::PFACC => todo!(),
        // Opcode::PFCMPEQ => todo!(),
        // Opcode::PFMUL => todo!(),
        // Opcode::PFMULHRW => todo!(),
        // Opcode::PFRCPIT2 => todo!(),
        // Opcode::PFNACC => todo!(),
        // Opcode::PFPNACC => todo!(),
        // Opcode::PSWAPD => todo!(),
        // Opcode::PAVGUSB => todo!(),
        // Opcode::ENQCMD => todo!(),
        // Opcode::ENQCMDS => todo!(),
        // Opcode::INVEPT => todo!(),
        // Opcode::INVVPID => todo!(),
        // Opcode::INVPCID => todo!(),
        // Opcode::PTWRITE => todo!(),
        // Opcode::GF2P8AFFINEQB => todo!(),
        // Opcode::GF2P8AFFINEINVQB => todo!(),
        // Opcode::GF2P8MULB => todo!(),
        // Opcode::WRUSS => todo!(),
        // Opcode::WRSS => todo!(),
        // Opcode::INCSSP => todo!(),
        // Opcode::SAVEPREVSSP => todo!(),
        // Opcode::SETSSBSY => todo!(),
        // Opcode::CLRSSBSY => todo!(),
        // Opcode::RSTORSSP => todo!(),
        Opcode::ENDBR64 => {
            // End of branch marker.
            // It's a sort of landing pad for jump instructions, so that we can gracefully fail on an invalid jump.
            // It's perfectly valid to implement it as a noop.
        }
        // Opcode::ENDBR32 => todo!(),
        // Opcode::TDCALL => todo!(),
        // Opcode::SEAMRET => todo!(),
        // Opcode::SEAMOPS => todo!(),
        // Opcode::SEAMCALL => todo!(),
        // Opcode::TPAUSE => todo!(),
        // Opcode::UMONITOR => todo!(),
        // Opcode::UMWAIT => todo!(),
        // Opcode::UIRET => todo!(),
        // Opcode::TESTUI => todo!(),
        // Opcode::CLUI => todo!(),
        // Opcode::STUI => todo!(),
        // Opcode::SENDUIPI => todo!(),
        // Opcode::XSUSLDTRK => todo!(),
        // Opcode::XRESLDTRK => todo!(),
        // Opcode::VALIGND => todo!(),
        // Opcode::VALIGNQ => todo!(),
        // Opcode::VBLENDMPD => todo!(),
        // Opcode::VBLENDMPS => todo!(),
        // Opcode::VCOMPRESSPD => todo!(),
        // Opcode::VCOMPRESSPS => todo!(),
        // Opcode::VCVTPD2UDQ => todo!(),
        // Opcode::VCVTTPD2UDQ => todo!(),
        // Opcode::VCVTPS2UDQ => todo!(),
        // Opcode::VCVTTPS2UDQ => todo!(),
        // Opcode::VCVTQQ2PD => todo!(),
        // Opcode::VCVTQQ2PS => todo!(),
        // Opcode::VCVTSD2USI => todo!(),
        // Opcode::VCVTTSD2USI => todo!(),
        // Opcode::VCVTSS2USI => todo!(),
        // Opcode::VCVTTSS2USI => todo!(),
        // Opcode::VCVTUDQ2PD => todo!(),
        // Opcode::VCVTUDQ2PS => todo!(),
        // Opcode::VCVTUSI2USD => todo!(),
        // Opcode::VCVTUSI2USS => todo!(),
        // Opcode::VEXPANDPD => todo!(),
        // Opcode::VEXPANDPS => todo!(),
        // Opcode::VEXTRACTF32X4 => todo!(),
        // Opcode::VEXTRACTF64X4 => todo!(),
        // Opcode::VEXTRACTI32X4 => todo!(),
        // Opcode::VEXTRACTI64X4 => todo!(),
        // Opcode::VFIXUPIMMPD => todo!(),
        // Opcode::VFIXUPIMMPS => todo!(),
        // Opcode::VFIXUPIMMSD => todo!(),
        // Opcode::VFIXUPIMMSS => todo!(),
        // Opcode::VGETEXPPD => todo!(),
        // Opcode::VGETEXPPS => todo!(),
        // Opcode::VGETEXPSD => todo!(),
        // Opcode::VGETEXPSS => todo!(),
        // Opcode::VGETMANTPD => todo!(),
        // Opcode::VGETMANTPS => todo!(),
        // Opcode::VGETMANTSD => todo!(),
        // Opcode::VGETMANTSS => todo!(),
        // Opcode::VINSERTF32X4 => todo!(),
        // Opcode::VINSERTF64X4 => todo!(),
        // Opcode::VINSERTI64X4 => todo!(),
        // Opcode::VMOVDQA32 => todo!(),
        // Opcode::VMOVDQA64 => todo!(),
        // Opcode::VMOVDQU32 => todo!(),
        // Opcode::VMOVDQU64 => todo!(),
        // Opcode::VPBLENDMD => todo!(),
        // Opcode::VPBLENDMQ => todo!(),
        // Opcode::VPCMPD => todo!(),
        // Opcode::VPCMPUD => todo!(),
        // Opcode::VPCMPQ => todo!(),
        // Opcode::VPCMPUQ => todo!(),
        // Opcode::VPCOMPRESSQ => todo!(),
        // Opcode::VPCOMPRESSD => todo!(),
        // Opcode::VPERMI2D => todo!(),
        // Opcode::VPERMI2Q => todo!(),
        // Opcode::VPERMI2PD => todo!(),
        // Opcode::VPERMI2PS => todo!(),
        // Opcode::VPERMT2D => todo!(),
        // Opcode::VPERMT2Q => todo!(),
        // Opcode::VPERMT2PD => todo!(),
        // Opcode::VPERMT2PS => todo!(),
        // Opcode::VPMAXSQ => todo!(),
        // Opcode::VPMAXUQ => todo!(),
        // Opcode::VPMINSQ => todo!(),
        // Opcode::VPMINUQ => todo!(),
        // Opcode::VPMOVSQB => todo!(),
        // Opcode::VPMOVUSQB => todo!(),
        // Opcode::VPMOVSQW => todo!(),
        // Opcode::VPMOVUSQW => todo!(),
        // Opcode::VPMOVSQD => todo!(),
        // Opcode::VPMOVUSQD => todo!(),
        // Opcode::VPMOVSDB => todo!(),
        // Opcode::VPMOVUSDB => todo!(),
        // Opcode::VPMOVSDW => todo!(),
        // Opcode::VPMOVUSDW => todo!(),
        // Opcode::VPROLD => todo!(),
        // Opcode::VPROLQ => todo!(),
        // Opcode::VPROLVD => todo!(),
        // Opcode::VPROLVQ => todo!(),
        // Opcode::VPRORD => todo!(),
        // Opcode::VPRORQ => todo!(),
        // Opcode::VPRORRD => todo!(),
        // Opcode::VPRORRQ => todo!(),
        // Opcode::VPSCATTERDD => todo!(),
        // Opcode::VPSCATTERDQ => todo!(),
        // Opcode::VPSCATTERQD => todo!(),
        // Opcode::VPSCATTERQQ => todo!(),
        // Opcode::VPSRAQ => todo!(),
        // Opcode::VPSRAVQ => todo!(),
        // Opcode::VPTESTNMD => todo!(),
        // Opcode::VPTESTNMQ => todo!(),
        // Opcode::VPTERNLOGD => todo!(),
        // Opcode::VPTERNLOGQ => todo!(),
        // Opcode::VPTESTMD => todo!(),
        // Opcode::VPTESTMQ => todo!(),
        // Opcode::VRCP14PD => todo!(),
        // Opcode::VRCP14PS => todo!(),
        // Opcode::VRCP14SD => todo!(),
        // Opcode::VRCP14SS => todo!(),
        // Opcode::VRNDSCALEPD => todo!(),
        // Opcode::VRNDSCALEPS => todo!(),
        // Opcode::VRNDSCALESD => todo!(),
        // Opcode::VRNDSCALESS => todo!(),
        // Opcode::VRSQRT14PD => todo!(),
        // Opcode::VRSQRT14PS => todo!(),
        // Opcode::VRSQRT14SD => todo!(),
        // Opcode::VRSQRT14SS => todo!(),
        // Opcode::VSCALEDPD => todo!(),
        // Opcode::VSCALEDPS => todo!(),
        // Opcode::VSCALEDSD => todo!(),
        // Opcode::VSCALEDSS => todo!(),
        // Opcode::VSCATTERDD => todo!(),
        // Opcode::VSCATTERDQ => todo!(),
        // Opcode::VSCATTERQD => todo!(),
        // Opcode::VSCATTERQQ => todo!(),
        // Opcode::VSHUFF32X4 => todo!(),
        // Opcode::VSHUFF64X2 => todo!(),
        // Opcode::VSHUFI32X4 => todo!(),
        // Opcode::VSHUFI64X2 => todo!(),
        // Opcode::VCVTTPD2QQ => todo!(),
        // Opcode::VCVTPD2QQ => todo!(),
        // Opcode::VCVTTPD2UQQ => todo!(),
        // Opcode::VCVTPD2UQQ => todo!(),
        // Opcode::VCVTTPS2QQ => todo!(),
        // Opcode::VCVTPS2QQ => todo!(),
        // Opcode::VCVTTPS2UQQ => todo!(),
        // Opcode::VCVTPS2UQQ => todo!(),
        // Opcode::VCVTUQQ2PD => todo!(),
        // Opcode::VCVTUQQ2PS => todo!(),
        // Opcode::VEXTRACTF64X2 => todo!(),
        // Opcode::VEXTRACTI64X2 => todo!(),
        // Opcode::VFPCLASSPD => todo!(),
        // Opcode::VFPCLASSPS => todo!(),
        // Opcode::VFPCLASSSD => todo!(),
        // Opcode::VFPCLASSSS => todo!(),
        // Opcode::VINSERTF64X2 => todo!(),
        // Opcode::VINSERTI64X2 => todo!(),
        // Opcode::VPMOVM2D => todo!(),
        // Opcode::VPMOVM2Q => todo!(),
        // Opcode::VPMOVB2D => todo!(),
        // Opcode::VPMOVQ2M => todo!(),
        // Opcode::VRANGEPD => todo!(),
        // Opcode::VRANGEPS => todo!(),
        // Opcode::VRANGESD => todo!(),
        // Opcode::VRANGESS => todo!(),
        // Opcode::VREDUCEPD => todo!(),
        // Opcode::VREDUCEPS => todo!(),
        // Opcode::VREDUCESD => todo!(),
        // Opcode::VREDUCESS => todo!(),
        // Opcode::VDBPSADBW => todo!(),
        // Opcode::VMOVDQU8 => todo!(),
        // Opcode::VMOVDQU16 => todo!(),
        // Opcode::VPBLENDMB => todo!(),
        // Opcode::VPBLENDMW => todo!(),
        // Opcode::VPCMPB => todo!(),
        // Opcode::VPCMPUB => todo!(),
        // Opcode::VPCMPW => todo!(),
        // Opcode::VPCMPUW => todo!(),
        // Opcode::VPERMW => todo!(),
        // Opcode::VPERMI2B => todo!(),
        // Opcode::VPERMI2W => todo!(),
        // Opcode::VPMOVM2B => todo!(),
        // Opcode::VPMOVM2W => todo!(),
        // Opcode::VPMOVB2M => todo!(),
        // Opcode::VPMOVW2M => todo!(),
        // Opcode::VPMOVSWB => todo!(),
        // Opcode::VPMOVUSWB => todo!(),
        // Opcode::VPSLLVW => todo!(),
        // Opcode::VPSRAVW => todo!(),
        // Opcode::VPSRLVW => todo!(),
        // Opcode::VPTESTNMB => todo!(),
        // Opcode::VPTESTNMW => todo!(),
        // Opcode::VPTESTMB => todo!(),
        // Opcode::VPTESTMW => todo!(),
        // Opcode::VPBROADCASTM => todo!(),
        // Opcode::VPCONFLICTD => todo!(),
        // Opcode::VPCONFLICTQ => todo!(),
        // Opcode::VPLZCNTD => todo!(),
        // Opcode::VPLZCNTQ => todo!(),
        // Opcode::KUNPCKBW => todo!(),
        // Opcode::KUNPCKWD => todo!(),
        // Opcode::KUNPCKDQ => todo!(),
        // Opcode::KADDB => todo!(),
        // Opcode::KANDB => todo!(),
        // Opcode::KANDNB => todo!(),
        // Opcode::KMOVB => todo!(),
        // Opcode::KNOTB => todo!(),
        // Opcode::KORB => todo!(),
        // Opcode::KORTESTB => todo!(),
        // Opcode::KSHIFTLB => todo!(),
        // Opcode::KSHIFTRB => todo!(),
        // Opcode::KTESTB => todo!(),
        // Opcode::KXNORB => todo!(),
        // Opcode::KXORB => todo!(),
        // Opcode::KADDW => todo!(),
        // Opcode::KANDW => todo!(),
        // Opcode::KANDNW => todo!(),
        // Opcode::KMOVW => todo!(),
        // Opcode::KNOTW => todo!(),
        // Opcode::KORW => todo!(),
        // Opcode::KORTESTW => todo!(),
        // Opcode::KSHIFTLW => todo!(),
        // Opcode::KSHIFTRW => todo!(),
        // Opcode::KTESTW => todo!(),
        // Opcode::KXNORW => todo!(),
        // Opcode::KXORW => todo!(),
        // Opcode::KADDD => todo!(),
        // Opcode::KANDD => todo!(),
        // Opcode::KANDND => todo!(),
        // Opcode::KMOVD => todo!(),
        // Opcode::KNOTD => todo!(),
        // Opcode::KORD => todo!(),
        // Opcode::KORTESTD => todo!(),
        // Opcode::KSHIFTLD => todo!(),
        // Opcode::KSHIFTRD => todo!(),
        // Opcode::KTESTD => todo!(),
        // Opcode::KXNORD => todo!(),
        // Opcode::KXORD => todo!(),
        // Opcode::KADDQ => todo!(),
        // Opcode::KANDQ => todo!(),
        // Opcode::KANDNQ => todo!(),
        // Opcode::KMOVQ => todo!(),
        // Opcode::KNOTQ => todo!(),
        // Opcode::KORQ => todo!(),
        // Opcode::KORTESTQ => todo!(),
        // Opcode::KSHIFTLQ => todo!(),
        // Opcode::KSHIFTRQ => todo!(),
        // Opcode::KTESTQ => todo!(),
        // Opcode::KXNORQ => todo!(),
        // Opcode::KXORQ => todo!(),
        // Opcode::VEXP2PD => todo!(),
        // Opcode::VEXP2PS => todo!(),
        // Opcode::VEXP2SD => todo!(),
        // Opcode::VEXP2SS => todo!(),
        // Opcode::VRCP28PD => todo!(),
        // Opcode::VRCP28PS => todo!(),
        // Opcode::VRCP28SD => todo!(),
        // Opcode::VRCP28SS => todo!(),
        // Opcode::VRSQRT28PD => todo!(),
        // Opcode::VRSQRT28PS => todo!(),
        // Opcode::VRSQRT28SD => todo!(),
        // Opcode::VRSQRT28SS => todo!(),
        // Opcode::VGATHERPF0DPD => todo!(),
        // Opcode::VGATHERPF0DPS => todo!(),
        // Opcode::VGATHERPF0QPD => todo!(),
        // Opcode::VGATHERPF0QPS => todo!(),
        // Opcode::VGATHERPF1DPD => todo!(),
        // Opcode::VGATHERPF1DPS => todo!(),
        // Opcode::VGATHERPF1QPD => todo!(),
        // Opcode::VGATHERPF1QPS => todo!(),
        // Opcode::VSCATTERPF0DPD => todo!(),
        // Opcode::VSCATTERPF0DPS => todo!(),
        // Opcode::VSCATTERPF0QPD => todo!(),
        // Opcode::VSCATTERPF0QPS => todo!(),
        // Opcode::VSCATTERPF1DPD => todo!(),
        // Opcode::VSCATTERPF1DPS => todo!(),
        // Opcode::VSCATTERPF1QPD => todo!(),
        // Opcode::VSCATTERPF1QPS => todo!(),
        // Opcode::BNDMK => todo!(),
        // Opcode::BNDCL => todo!(),
        // Opcode::BNDCU => todo!(),
        // Opcode::BNDCN => todo!(),
        // Opcode::BNDMOV => todo!(),
        // Opcode::BNDLDX => todo!(),
        // Opcode::BNDSTX => todo!(),
        // Opcode::VGF2P8AFFINEQB => todo!(),
        // Opcode::VGF2P8AFFINEINVQB => todo!(),
        // Opcode::VPSHRDQ => todo!(),
        // Opcode::VPSHRDD => todo!(),
        // Opcode::VPSHRDW => todo!(),
        // Opcode::VPSHLDQ => todo!(),
        // Opcode::VPSHLDD => todo!(),
        // Opcode::VPSHLDW => todo!(),
        // Opcode::VBROADCASTF32X8 => todo!(),
        // Opcode::VBROADCASTF64X4 => todo!(),
        // Opcode::VBROADCASTF32X4 => todo!(),
        // Opcode::VBROADCASTF64X2 => todo!(),
        // Opcode::VBROADCASTF32X2 => todo!(),
        // Opcode::VBROADCASTI32X8 => todo!(),
        // Opcode::VBROADCASTI64X4 => todo!(),
        // Opcode::VBROADCASTI32X4 => todo!(),
        // Opcode::VBROADCASTI64X2 => todo!(),
        // Opcode::VBROADCASTI32X2 => todo!(),
        // Opcode::VEXTRACTI32X8 => todo!(),
        // Opcode::VEXTRACTF32X8 => todo!(),
        // Opcode::VINSERTI32X8 => todo!(),
        // Opcode::VINSERTF32X8 => todo!(),
        // Opcode::VINSERTI32X4 => todo!(),
        // Opcode::V4FNMADDSS => todo!(),
        // Opcode::V4FNMADDPS => todo!(),
        // Opcode::VCVTNEPS2BF16 => todo!(),
        // Opcode::V4FMADDSS => todo!(),
        // Opcode::V4FMADDPS => todo!(),
        // Opcode::VCVTNE2PS2BF16 => todo!(),
        // Opcode::VP2INTERSECTD => todo!(),
        // Opcode::VP2INTERSECTQ => todo!(),
        // Opcode::VP4DPWSSDS => todo!(),
        // Opcode::VP4DPWSSD => todo!(),
        // Opcode::VPDPWSSDS => todo!(),
        // Opcode::VPDPWSSD => todo!(),
        // Opcode::VPDPBUSDS => todo!(),
        // Opcode::VDPBF16PS => todo!(),
        // Opcode::VPBROADCASTMW2D => todo!(),
        // Opcode::VPBROADCASTMB2Q => todo!(),
        // Opcode::VPMOVD2M => todo!(),
        // Opcode::VPMOVQD => todo!(),
        // Opcode::VPMOVWB => todo!(),
        // Opcode::VPMOVDB => todo!(),
        // Opcode::VPMOVDW => todo!(),
        // Opcode::VPMOVQB => todo!(),
        // Opcode::VPMOVQW => todo!(),
        // Opcode::VGF2P8MULB => todo!(),
        // Opcode::VPMADD52HUQ => todo!(),
        // Opcode::VPMADD52LUQ => todo!(),
        // Opcode::VPSHUFBITQMB => todo!(),
        // Opcode::VPERMB => todo!(),
        // Opcode::VPEXPANDD => todo!(),
        // Opcode::VPEXPANDQ => todo!(),
        // Opcode::VPABSQ => todo!(),
        // Opcode::VPRORVD => todo!(),
        // Opcode::VPRORVQ => todo!(),
        // Opcode::VPMULTISHIFTQB => todo!(),
        // Opcode::VPERMT2B => todo!(),
        // Opcode::VPERMT2W => todo!(),
        // Opcode::VPSHRDVQ => todo!(),
        // Opcode::VPSHRDVD => todo!(),
        // Opcode::VPSHRDVW => todo!(),
        // Opcode::VPSHLDVQ => todo!(),
        // Opcode::VPSHLDVD => todo!(),
        // Opcode::VPSHLDVW => todo!(),
        // Opcode::VPCOMPRESSB => todo!(),
        // Opcode::VPCOMPRESSW => todo!(),
        // Opcode::VPEXPANDB => todo!(),
        // Opcode::VPEXPANDW => todo!(),
        // Opcode::VPOPCNTD => todo!(),
        // Opcode::VPOPCNTQ => todo!(),
        // Opcode::VPOPCNTB => todo!(),
        // Opcode::VPOPCNTW => todo!(),
        // Opcode::VSCALEFSS => todo!(),
        // Opcode::VSCALEFSD => todo!(),
        // Opcode::VSCALEFPS => todo!(),
        // Opcode::VSCALEFPD => todo!(),
        // Opcode::VPDPBUSD => todo!(),
        // Opcode::VCVTUSI2SD => todo!(),
        // Opcode::VCVTUSI2SS => todo!(),
        // Opcode::VPXORD => todo!(),
        // Opcode::VPXORQ => todo!(),
        // Opcode::VPORD => todo!(),
        // Opcode::VPORQ => todo!(),
        // Opcode::VPANDND => todo!(),
        // Opcode::VPANDNQ => todo!(),
        // Opcode::VPANDD => todo!(),
        // Opcode::VPANDQ => todo!(),
        // Opcode::PSMASH => todo!(),
        // Opcode::PVALIDATE => todo!(),
        // Opcode::RMPADJUST => todo!(),
        // Opcode::RMPUPDATE => todo!(),
        _ => {
            // TODO eventually this should fire a recoverable signal.
            panic!("Unimplemented instruction: {}", instruction);
        }
    }

    Ok(None)
}
